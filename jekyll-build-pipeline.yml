---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  #LambdaEdgeARN
  LambdaEdgeStackARN:
    Description: Exported ARN from the Lambda Edge Function Stack
    Type: String
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #DomainName
  DomainName:
    Description: Domain Name
    Type: String
    Default: jekyll-demo.com
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #WebsiteURL
  WebsiteURL:
    Description: Website URL
    Type: String
    Default: www.jekyll-demo.com
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #IAM Group
  CodeCommitGroup:
    Description: Name of the CodeCommit group
    Type: String
    Default: jekyll-demo-codecommit-repo-rw
    #Default: codecommit-group-rw
    #Default: !Join ['', [!Ref AWS::StackName, '-group-rw']]
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #CodeCommit
  RepositoryName:
    Description: Name of the CodeCommit repo
    Type: String
    Default: jekyll-demo-repo
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #CodeBuild
  BuildProjectName:
    Description: Name of the CodeCommit build project
    Type: String
    Default: jekyll-build-project
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  RepositoryBranch:
    Description: Name of the CodeCommit branch to build from
    Type: String
    Default: master
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #S3
  S3BucketPrefix:
    Type: String
    Default: jekyll-demo-website
    Description: Name of the S3 bucket prefix where deployments will be pushed
  S3StagingAccessControl:
    Type: String
    Default: Private
    AllowedValues:
      - PublicRead
      - Private

Resources:
  #Route53
  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: !Ref DomainName
  Route53Record:
    DependsOn: CloudFrontDistro
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget: 
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt [CloudFrontDistro, DomainName]
      - Name: !Ref WebsiteURL
        Type: CNAME
        TTL: 900
        ResourceRecords: 
        - !GetAtt [CloudFrontDistro, DomainName]


  #IAM Group & Permissions
  CodeCommitIAMGroup:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: !Ref 'CodeCommitGroup'
      Path: !Sub '/${AWS::StackName}/'
      ManagedPolicyArns: 
        - !Ref CodeCommitIAMManagedPolicy
      #Path: String
      #Policies: 
      #  - !Ref 'CodeCommitIAMPolicy'
  CodeCommitIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ['', [!Ref 'AWS::StackName', '-codecommit-policy']]
      Path: !Join ['', [/, !Ref 'AWS::StackName', /]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'codecommit:GitPull'
              - 'codecommit:GitPush'
            Resource: !GetAtt [CodeCommitRepo, Arn]
  ###
  CodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      #ManagedPolicyName: !Join ['', [!Ref 'AWS::StackName', '-codebuild-policy']]
      #Path: !Join ['', [/, !Ref 'AWS::StackName', /]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        ##
        - Effect: Allow
          Resource:
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuild}'
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuild}:*'
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        ###
        - Effect: Allow
          Resource:
          - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-${AWS::AccountId}'
          - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-${AWS::AccountId}/*'
          Action:
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketAcl
          - s3:GetBucketLocation
        ###
        - Effect: Allow
          Resource:
          - !GetAtt [CodeCommitRepo, Arn]
          Action:
          - codecommit:GitPull
        ###
        - Effect: Allow
          Action:
          - codebuild:CreateReportGroup
          - codebuild:CreateReport
          - codebuild:UpdateReport
          - codebuild:BatchPutTestCases
          Resource:
          - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${CodeBuild}-*'
        ###
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:Get*
          - s3:List*
          Resource:
          - !GetAtt [S3ProdBucket, Arn]
          - !GetAtt [S3StagingBucket, Arn]
          - !Sub '${S3ProdBucket.Arn}/*'
          - !Sub '${S3StagingBucket.Arn}/*'
      PolicyName: jekyll-codebuild-service-policy
      Roles: 
        - !Ref CodeBuildServiceRole
  #!Ref CodeBuildServicePolicy #returns policy name

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action: sts:AssumeRole
      Description: A role to allow codebuild to do it's thing
      #Path: !Sub '/${AWS::StackName}/service-role/'
      Path: !Sub '/${AWS::StackName}/'
      RoleName: jekyll-codebuild-service-role
  #!Ref CodeBuildServiceRole #(role name)
  #!GetAtt [CodeBuildServiceRole , Arn]
  #!GetAtt [CodeBuildServiceRole , RoleId]
  ###

  ###
  CodePipelineServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        ###
        - Action:
          - iam:PassRole
          Resource: "*"
          Effect: Allow
          Condition:
            StringEqualsIfExists:
              iam:PassedToService:
              - cloudformation.amazonaws.com
              - elasticbeanstalk.amazonaws.com
              - ec2.amazonaws.com
              - ecs-tasks.amazonaws.com
        ###
        - Action:
          - codecommit:CancelUploadArchive
          - codecommit:GetBranch
          - codecommit:GetCommit
          - codecommit:GetUploadArchiveStatus
          - codecommit:UploadArchive
          Resource: "*"
          Effect: Allow
        ###
        - Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetApplication
          - codedeploy:GetApplicationRevision
          - codedeploy:GetDeployment
          - codedeploy:GetDeploymentConfig
          - codedeploy:RegisterApplicationRevision
          Resource: "*"
          Effect: Allow
        ###
        - Action:
          - elasticbeanstalk:*
          - ec2:*
          - elasticloadbalancing:*
          - autoscaling:*
          - cloudwatch:*
          - s3:*
          - sns:*
          - cloudformation:*
          - rds:*
          - sqs:*
          - ecs:*
          Resource: "*"
          Effect: Allow
        ###
        - Action:
          - lambda:InvokeFunction
          - lambda:ListFunctions
          Resource: "*"
          Effect: Allow
        ###
        - Action:
          - opsworks:CreateDeployment
          - opsworks:DescribeApps
          - opsworks:DescribeCommands
          - opsworks:DescribeDeployments
          - opsworks:DescribeInstances
          - opsworks:DescribeStacks
          - opsworks:UpdateApp
          - opsworks:UpdateStack
          Resource: "*"
          Effect: Allow
        ###
        - Action:
          - cloudformation:CreateStack
          - cloudformation:DeleteStack
          - cloudformation:DescribeStacks
          - cloudformation:UpdateStack
          - cloudformation:CreateChangeSet
          - cloudformation:DeleteChangeSet
          - cloudformation:DescribeChangeSet
          - cloudformation:ExecuteChangeSet
          - cloudformation:SetStackPolicy
          - cloudformation:ValidateTemplate
          Resource: "*"
          Effect: Allow
        ###
        - Action:
          - codebuild:BatchGetBuilds
          - codebuild:StartBuild
          Resource: "*"
          Effect: Allow
        ###
        - Effect: Allow
          Action:
          - devicefarm:ListProjects
          - devicefarm:ListDevicePools
          - devicefarm:GetRun
          - devicefarm:GetUpload
          - devicefarm:CreateUpload
          - devicefarm:ScheduleRun
          Resource: "*"
        ###
        - Effect: Allow
          Action:
          - servicecatalog:ListProvisioningArtifacts
          - servicecatalog:CreateProvisioningArtifact
          - servicecatalog:DescribeProvisioningArtifact
          - servicecatalog:DeleteProvisioningArtifact
          - servicecatalog:UpdateProduct
          Resource: "*"
        ###
        - Effect: Allow
          Action:
          - cloudformation:ValidateTemplate
          Resource: "*"
        ###
        - Effect: Allow
          Action:
          - ecr:DescribeImages
          Resource: "*"
      PolicyName: jekyll-codepipeline-service-policy
      Roles: 
        - !Ref CodePipelineServiceRole
  #!Ref CodePipelineServicePolicy #returns policy name

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Description: A role to allow codepipeline to do it's thing
      Path: !Sub '/${AWS::StackName}/service-role/'
      RoleName: jekyll-pipeline-service-role
  #!Ref CodePipelineServiceRole #(role name)
  #!GetAtt [CodePipelineServiceRole , Arn]
  #!GetAtt [CodePipelineServiceRole , RoleId]
  ###

  #CodeCommit Repo
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties: 
      #RepositoryDescription: String
      RepositoryName: 
        Ref: RepositoryName
      #Tags: 
      #  - Tag
      #Triggers: 
      #  - RepositoryTrigger
  #!Ref CodeCommitRepo #return repo ID
  #!GetAtt [CodeCommitRepo, Arn]
  #!GetAtt [CodeCommitRepo, CloneUrlHttp]
  #!GetAtt [CodeCommitRepo, CloneUrlSsh]
  #!GetAtt [CodeCommitRepo, Name] #return repo name


  #CodeBuild Project
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        #ArtifactIdentifier: String
        #EncryptionDisabled: Boolean
        #Location: String
        #Name: String
        #NamespaceType: String
        #OverrideArtifactName: Boolean
        #Packaging: String
        #Path: String
        Type: NO_ARTIFACTS
      #BadgeEnabled: Boolean
      #Cache: 
      #  ProjectCache
      Description: Jekyll static-site builder
      #EncryptionKey: String
      Environment: 
        #Certificate: String
        ComputeType: BUILD_GENERAL1_SMALL
        #EnvironmentVariables: 
        #  - EnvironmentVariable
        #Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        #ImagePullCredentialsType: String
        #PrivilegedMode: Boolean
        #RegistryCredential: 
        #  RegistryCredential
        Type: LINUX_CONTAINER
      #LogsConfig: 
      #  LogsConfig
      Name: !Ref BuildProjectName
      #QueuedTimeoutInMinutes: 10
      #SecondaryArtifacts: 
      #  - Artifacts
      #SecondarySources: 
      #  - Source
      #SecondarySourceVersions: 
      #  - ProjectSourceVersion
      ServiceRole: !GetAtt [CodeBuildServiceRole , Arn]
      Source: 
        #Auth: 
        #  SourceAuth
        #BuildSpec: String
        GitCloneDepth: 1
        #GitSubmodulesConfig: 
        #  GitSubmodulesConfig
        #InsecureSsl: Boolean
        Location: !GetAtt [CodeCommitRepo, CloneUrlHttp]
        #ReportBuildStatus: Boolean
        #SourceIdentifier: String
        Type: CODECOMMIT
      SourceVersion: !Sub 'refs/heads/${RepositoryBranch}'
      #Tags: 
      #  - Tag
      #TimeoutInMinutes: 60
      #Triggers: 
      #  ProjectTriggers
      #VpcConfig: 
      #  VpcConfig
  #!Ref CodeBuild #returns project name
  #!GetAtt [CodeBuild, Arn]

  #CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
          #EncryptionKey: 
          #  EncryptionKey
          Location: !Sub 'codepipeline-${AWS::Region}-${AWS::AccountId}'
          #Location: !Sub 'codepipeline-${AWS::Region}-73556003381'
          Type: S3
      #ArtifactStores: 
      #  - ArtifactStoreMap
      #DisableInboundStageTransitions: 
      #  - StageTransition
      Name: !Sub '${AWS::StackName}-pipeline'
      #RestartExecutionOnUpdate: Boolean
      RoleArn: !GetAtt [CodePipelineServiceRole , Arn]
      Stages: 
        ###
        - Name: Source
          #Blockers: 
          #  - BlockerDeclaration
          Actions: 
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: !Ref RepositoryBranch
                #RepositoryName: !Ref CodeCommitRepo
                RepositoryName: !GetAtt [CodeCommitRepo, Name]
                PollForSourceChanges: false
              #InputArtifacts: 
              #  - InputArtifact
              Name: Source
              #Namespace: Source
              OutputArtifacts: 
                - Name: SourceArtifact
              Region: !Sub ${AWS::Region}
              #RoleArn: String
              RunOrder: 1
        ###
        - Name: Jekyll-Staging-Build
          #Blockers: 
          #  - BlockerDeclaration
          Actions: 
            - ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                #PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub '[{"name":"S3_URL","value":"${S3StagingBucket}","type":"PLAINTEXT"}]'
              InputArtifacts: 
                - Name: SourceArtifact
              Name: Jekyll-Staging-Build
              #Namespace: Staging
              OutputArtifacts: 
                - Name: StagingBuildArtifact
              Region: !Sub ${AWS::Region}
              #RoleArn: String
              RunOrder: 2
        ###
        - Name: Jekyll-Production-Build
          #Blockers: 
          #  - BlockerDeclaration
          Actions: 
            - ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                #PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub '[{"name":"S3_URL","value":"${S3ProdBucket}","type":"PLAINTEXT"}]'
              InputArtifacts: 
                - Name: SourceArtifact
              Name: Jekyll-Production-Build
              #Namespace: Production
              OutputArtifacts: 
                - Name: ProductionBuildArtifact
              Region: !Sub ${AWS::Region}
              #RoleArn: String
              RunOrder: 3
        ###
        - Name: Update-Cloudfront
          #Blockers: 
          #  - BlockerDeclaration
          Actions: 
            - ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                #PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub '[{"name":"CDN_DISTRIBUTION_ID","value":"${CloudFrontDistro}","type":"PLAINTEXT"}]'
              InputArtifacts: 
                - Name: SourceArtifact
              Name: Update-Cloudfront
              #Namespace: Production
              #OutputArtifacts: 
              #  - Name: ProductionBuildArtifact
              Region: !Sub ${AWS::Region}
              #RoleArn: String
              RunOrder: 4
      #Tags: 
      #  - Tag

  #S3 buckets
  S3ProdBucket:
    Type: AWS::S3::Bucket
    Properties: 
      #AccelerateConfiguration: 
      #  AccelerateConfiguration
      #AccessControl: String
      #AnalyticsConfigurations: 
      #  - AnalyticsConfiguration
      #BucketEncryption: 
      #  BucketEncryption
      BucketName:
        !Join ['', [!Ref 'S3BucketPrefix', '-prod']]
        #Fn::Join:
        #- ''
        #- - !Ref 'S3BucketPrefix'
        #  - '-prod'
      #CorsConfiguration: 
      #  CorsConfiguration
      #InventoryConfigurations: 
      #  - InventoryConfiguration
      #LifecycleConfiguration: 
      #  LifecycleConfiguration
      #LoggingConfiguration: 
      #  LoggingConfiguration
      #MetricsConfigurations: 
      #  - MetricsConfiguration
      #NotificationConfiguration: 
      #  NotificationConfiguration
      #ObjectLockConfiguration: 
      #  ObjectLockConfiguration
      #ObjectLockEnabled: Boolean
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      #ReplicationConfiguration: 
      #  ReplicationConfiguration
      #Tags: 
      #  - Tag
      #VersioningConfiguration: 
      #  VersioningConfiguration
      WebsiteConfiguration: 
        ErrorDocument: 404.html
        IndexDocument: index.html
  #!Ref S3ProdBucket #returns bucket name
  #!GetAtt [S3ProdBucket, Arn]
  #!GetAtt [S3ProdBucket, DomainName] #Returns the IPv4 DNS name of the specified bucket
  #!GetAtt [S3ProdBucket, DualStackDomainName] #Returns the IPv6 DNS name of the specified bucket
  #!GetAtt [S3ProdBucket, RegionalDomainName] #Returns the regional domain name of the specified bucket
  #!GetAtt [S3ProdBucket, WebsiteURL]
  ProdBucketPolicy:
    DependsOn: CloudFrontDistro
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3ProdBucket'
      PolicyDocument:
        Statement:
          - Action: ['s3:GetObject']
            Effect: Allow
            Principal:
              AWS: !Join ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', !Ref 'CloudfrontOAI']]
            Resource:
              !Join ['', ['arn:aws:s3:::', !Ref 'S3ProdBucket', /*]]


  S3StagingBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: 
        !Join ['', [!Ref 'S3BucketPrefix', '-staging']]
      AccessControl: !Ref 'S3StagingAccessControl'
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      WebsiteConfiguration: 
        ErrorDocument: 404.html
        IndexDocument: index.html
  #!Ref S3StagingBucket #returns bucket name
  #!GetAtt [S3StagingBucket, Arn]
  #!GetAtt [S3StagingBucket, DomainName] #Returns the IPv4 DNS name of the specified bucket
  #!GetAtt [S3StagingBucket, DualStackDomainName] #Returns the IPv6 DNS name of the specified bucket
  #!GetAtt [S3StagingBucket, RegionalDomainName] #Returns the regional domain name of the specified bucket
  #!GetAtt [S3StagingBucket, WebsiteURL]

  CodePipelineS3ArtifactLocation:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: 
        !Sub 'codepipeline-${AWS::Region}-${AWS::AccountId}'
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  #!Ref CodePipelineS3ArtifactLocation #returns bucket name
  #!GetAtt [CodePipelineS3ArtifactLocation, Arn]
  #!GetAtt [CodePipelineS3ArtifactLocation, DomainName] #Returns the IPv4 DNS name of the specified bucket
  #!GetAtt [CodePipelineS3ArtifactLocation, DualStackDomainName] #Returns the IPv6 DNS name of the specified bucket
  #!GetAtt [CodePipelineS3ArtifactLocation, RegionalDomainName] #Returns the regional domain name of the specified bucket

  #ToDo - Issues with the bucket policy
  #StagingBucketPolicy:
  #  Type: AWS::S3::BucketPolicy
  #  Properties:
  #    Bucket: !Ref 'S3StagingBucket'
  #    PolicyDocument:
  #      Statement:
  #        - Action: ['s3:GetObject']
  #          Effect: Allow
  #          Principal: '*'
  #          Resource:
  #            !Join ['', ['arn:aws:s3:::', !Ref 'S3StagingBucket', /*]]

  #Create Cloudfront Distro
  CloudfrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Join ['', ['access-identity-', !GetAtt [S3ProdBucket, DomainName]]]

  CloudFrontDistro:
    DependsOn: 
      - S3ProdBucket
      #- LambdaEdgeFunction
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
          #Aliases: 
          #  - !Ref 'WebsiteURL'
          #CacheBehaviors: 
          #  - CacheBehavior
          #Comment: String
          CustomErrorResponses: 
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /404.html
          DefaultCacheBehavior: 
              AllowedMethods: 
                - GET
                - HEAD
              CachedMethods: 
                - GET
                - HEAD
              Compress: True
              #DefaultTTL: Double
              #FieldLevelEncryptionId: String
              ForwardedValues: 
                QueryString: False
                Cookies:
                  Forward: none
              #ToDo associated the lambda@edge to the distro
              LambdaFunctionAssociations:
                - EventType: origin-request
                  LambdaFunctionARN: !Ref LambdaEdgeStackARN
              #MaxTTL: Double
              #MinTTL: Double
              SmoothStreaming: False
              TargetOriginId: !Join ['', ['S3-', !Ref 'S3ProdBucket']]
              #TrustedSigners: 
              #  - String
              ViewerProtocolPolicy: allow-all
          DefaultRootObject: index.html
          Enabled: True
          HttpVersion: http2
          IPV6Enabled: True
          #Logging: 
          #  Logging
          Origins: 
              #CustomOriginConfig: 
              #  CustomOriginConfig
            - DomainName: !GetAtt [S3ProdBucket, DomainName]
              Id: !Join ['', ['S3-', !Ref 'S3ProdBucket']]
              #OriginCustomHeaders: 
              #  - OriginCustomHeader
              #OriginPath: String
              S3OriginConfig: 
                OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref 'CloudfrontOAI']]
          #PriceClass: String
          #Restrictions: 
          #  Restrictions
          #ViewerCertificate: 
          #  ViewerCertificate
          #WebACLId: String
  #!ref CloudFrontDistro #return cloudfront ID
  #!GetAtt [CloudFrontDistro, DomainName] #return cloudfront url

Outputs:
  CodeCommitURL:
    Value: !GetAtt [CodeCommitRepo, CloneUrlHttp]
  StagingURL:
    Value: !GetAtt [S3StagingBucket, WebsiteURL]
  HostedZoneID:
    Value: !Ref 'Route53HostedZone'
  DomainNameNS:
    Value: !Join [', ', !GetAtt [Route53HostedZone, NameServers]]
  CFDistroURL:
    Value: !GetAtt [CloudFrontDistro, DomainName]
  LambdaARN:
    Value: !Ref LambdaEdgeStackARN
