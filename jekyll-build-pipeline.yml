---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  #LambdaEdgeARN
  LambdaEdgeStackARN:
    Description: Exported ARN from the Lambda Edge Function Stack
    Type: String
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #DomainName
  DomainName:
    Description: Domain Name
    Type: String
    Default: jekyll-demo.com
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #WebsiteURL
  WebsiteURL:
    Description: Website URL
    Type: String
    Default: www.jekyll-demo.com
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #IAM Group
  CodeCommitGroup:
    Description: Name of the CodeCommit group - will be prefixed with the Stack Name.
    Type: String
    Default: codecommit-repo-rw
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #CodeCommit
  RepositoryName:
    Description: Name of the CodeCommit repo - will be prefixed with the Stack Name.
    Type: String
    Default: repo
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  RepositoryBranch:
    Description: Name of the CodeCommit branch to build from
    Type: String
    Default: master
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  #S3
  S3BucketPrefix:
    Type: String
    Default: website
    Description: Prefix of the S3 bucket where websites will be deployed - this will be prefixed with the Stack Name.
  S3StagingAccessControl:
    Type: String
    Default: Private
    AllowedValues:
      - PublicRead
      - Private

Resources:
  #Route53
  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: !Ref DomainName
  #!Ref Route53HostedZone #returns hosted zone ID
  #!GetAtt [Route53HostedZone, NameServers]
  Route53Record:
    DependsOn: CloudFrontDistro
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget: 
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt [CloudFrontDistro, DomainName]
      - Name: !Ref WebsiteURL
        Type: CNAME
        TTL: 900
        ResourceRecords: 
        - !GetAtt [CloudFrontDistro, DomainName]
  
  
  #IAM Groups
  CodeCommitIAMGroup:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: !Sub '${AWS::StackName}-${CodeCommitGroup}'
      Path: !Sub '/${AWS::StackName}/'
      ManagedPolicyArns: 
        - !Ref CodeCommitIAMManagedPolicy
  #!Ref CodeCommitIAMGroup #returns the group name
  #!GetAtt [CodeCommitIAMGroup, Arn]


  #IAM Policies
  CodeCommitIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-codecommit-policy'
      Path: !Sub '/${AWS::StackName}/'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'codecommit:GitPull'
              - 'codecommit:GitPush'
            Resource: !GetAtt [CodeCommitRepo, Arn]
  #!Ref CodeCommitIAMManagedPolicy #returns ARN
  CodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    #Type: AWS::IAM::ManagedPolicy
    Properties:
      #ManagedPolicyName: !Sub '${AWS::StackName}-codebuild-service-policy'
      PolicyName: !Sub '${AWS::StackName}-codebuild-service-policy'
      Roles: 
        - !Ref CodeBuildServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        ##
        - Effect: Allow
          Resource:
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuild}'
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuild}:*'
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        ###
        - Effect: Allow
          Resource:
          - !Sub '${CodePipelineS3ArtifactLocation.Arn}'
          - !Sub '${CodePipelineS3ArtifactLocation.Arn}/*'
          Action:
          #- s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketAcl
          - s3:GetBucketLocation
        ###
        - Effect: Allow
          Resource:
          - !GetAtt [CodeCommitRepo, Arn]
          Action:
          - codecommit:GitPull
        ###
        - Effect: Allow
          Action:
          - codebuild:CreateReportGroup
          - codebuild:CreateReport
          - codebuild:UpdateReport
          - codebuild:BatchPutTestCases
          Resource:
          - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${CodeBuild}-*'
        ###
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:Get*
          - s3:List*
          Resource:
          - !GetAtt [S3ProdBucket, Arn]
          - !GetAtt [S3StagingBucket, Arn]
          - !Sub '${S3ProdBucket.Arn}/*'
          - !Sub '${S3StagingBucket.Arn}/*'
        - Effect: Allow
          Action:
          - cloudfront:CreateInvalidation
          Resource:
          - !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistro}'
  #!Ref CodeBuildServicePolicy #returns policy name
  CodePipelineServicePolicy:
    Type: AWS::IAM::Policy
    #Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-codepipeline-service-policy'
      #ManagedPolicyName: !Sub '${AWS::StackName}-codepipeline-service-policy'
      #Path: !Sub '/${AWS::StackName}/'
      Roles: 
        - !Ref CodePipelineServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        ###
        - Action:
          - codecommit:CancelUploadArchive
          - codecommit:GetBranch
          - codecommit:GetCommit
          - codecommit:GetUploadArchiveStatus
          - codecommit:UploadArchive
          Resource: !GetAtt [CodeCommitRepo, Arn]
          Effect: Allow
        ###
        - Effect: Allow
          Resource:
          - !Sub '${CodePipelineS3ArtifactLocation.Arn}'
          - !Sub '${CodePipelineS3ArtifactLocation.Arn}/*'
          Action:
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketAcl
          - s3:GetBucketLocation
        ###
        - Action:
          - codebuild:BatchGetBuilds
          - codebuild:StartBuild
          Resource: !GetAtt [CodeBuild, Arn]
          Effect: Allow
        ###
  #!Ref CodePipelineServicePolicy #returns policy name
  CloudWatchEventPolicy:
    Type: AWS::IAM::Policy
    #Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-cloudwatch-events-policy'
      #ManagedPolicyName: !Sub '${AWS::StackName}-cloudwatch-events-policy'
      #Path: !Sub '/${AWS::StackName}/'
      Roles: 
        - !Ref CloudWatchEventServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'codepipeline:StartPipelineExecution'
            Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'
  #!Ref CloudWatchEventPolicy #returns ARN


  # IAM Roles
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      #ManagedPolicyArns:
      #  - !Ref CodeBuildServiceManagedPolicy
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
            - cloudfront.amazonaws.com
          Action: sts:AssumeRole
      Description: A role to allow codebuild to do it's thing
      Path: !Sub '/${AWS::StackName}/'
      RoleName: !Sub '${AWS::StackName}-codebuild-service-role'
  #!Ref CodeBuildServiceRole #(role name)
  #!GetAtt [CodeBuildServiceRole , Arn]
  #!GetAtt [CodeBuildServiceRole , RoleId]
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      #ManagedPolicyArns:
      #  - !Ref CodePipelineServiceManagedPolicy
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Description: A role to allow codepipeline to do it's thing
      Path: !Sub '/${AWS::StackName}/'
      RoleName: !Sub '${AWS::StackName}-pipeline-service-role'
  #!Ref CodePipelineServiceRole #(role name)
  #!GetAtt [CodePipelineServiceRole , Arn]
  #!GetAtt [CodePipelineServiceRole , RoleId]
  CloudWatchEventServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      #ManagedPolicyArns: 
      #  - !Ref CloudWatchEventManagedPolicy
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action: sts:AssumeRole
      Description: A role to allow cloudwatch events to trigger the build pipeline
      Path: !Sub '/${AWS::StackName}/'
      RoleName: !Sub '${AWS::StackName}-cloudwatch-events-service-role'
  #!Ref CloudWatchEventServiceRole #(role name)
  #!GetAtt [CloudWatchEventServiceRole , Arn]
  #!GetAtt [CloudWatchEventServiceRole , RoleId]


  #CodeCommit Repo
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: !Sub 'Code Repository for ${DomainName}'
      RepositoryName: !Sub '${AWS::StackName}-${RepositoryName}'
  #!Ref CodeCommitRepo #return repo ID
  #!GetAtt [CodeCommitRepo, Arn]
  #!GetAtt [CodeCommitRepo, CloneUrlHttp]
  #!GetAtt [CodeCommitRepo, CloneUrlSsh]
  #!GetAtt [CodeCommitRepo, Name] #return repo name


  #CloudWatch Event
  CloudWatchEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: CloudWatch Events rule to automatically start the pipeline when a change occurs in the CodeCommit repository.
      EventPattern:
        source:
        - aws.codecommit
        detail-type:
        - CodeCommit Repository State Change
        resources:
        - !GetAtt [CodeCommitRepo, Arn]
        detail:
          event:
          - referenceCreated
          - referenceUpdated
          referenceType:
          - branch
          referenceName:
          - !Ref RepositoryBranch
      Name: !Sub ${AWS::StackName}-codepipeline-rule
      State: ENABLED
      Targets: 
        - RoleArn: !GetAtt [CloudWatchEventServiceRole , Arn]
          Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'
          Id: 1
  #!Ref CloudWatchEvent #returns the event rule ID
  #!GetAtt [CloudWatchEvent, Arn]


  #CodeBuild Project
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: NO_ARTIFACTS
      Description: !Sub '${AWS::StackName} static-website builder'
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      Name: !Sub '${AWS::StackName}-build-project'
      ServiceRole: !GetAtt [CodeBuildServiceRole , Arn]
      Source: 
        GitCloneDepth: 1
        Location: !GetAtt [CodeCommitRepo, CloneUrlHttp]
        Type: CODECOMMIT
      SourceVersion: !Sub 'refs/heads/${RepositoryBranch}'
  #!Ref CodeBuild #returns project name
  #!GetAtt [CodeBuild, Arn]


  #CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
          Location: !Ref CodePipelineS3ArtifactLocation
          Type: S3
      Name: !Sub '${AWS::StackName}-pipeline'
      RoleArn: !GetAtt [CodePipelineServiceRole , Arn]
      Stages: 
        ###
        - Name: Source
          Actions: 
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: !Ref RepositoryBranch
                RepositoryName: !GetAtt [CodeCommitRepo, Name]
                PollForSourceChanges: false
              Name: Source
              OutputArtifacts: 
                - Name: SourceArtifact
              Region: !Sub ${AWS::Region}
              RunOrder: 1
        ###
        - Name: Jekyll-Staging-Build
          Actions: 
            - ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                EnvironmentVariables: !Sub '[{"name":"S3_URL","value":"${S3StagingBucket}","type":"PLAINTEXT"}]'
              InputArtifacts: 
                - Name: SourceArtifact
              Name: Jekyll-Staging-Build
              OutputArtifacts: 
                - Name: StagingBuildArtifact
              Region: !Sub ${AWS::Region}
              RunOrder: 2
        ###
        - Name: Jekyll-Production-Build
          Actions: 
            - ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                EnvironmentVariables: !Sub '[{"name":"S3_URL","value":"${S3ProdBucket}","type":"PLAINTEXT"}]'
              InputArtifacts: 
                - Name: SourceArtifact
              Name: Jekyll-Production-Build
              OutputArtifacts: 
                - Name: ProductionBuildArtifact
              Region: !Sub ${AWS::Region}
              RunOrder: 3
        ###
        - Name: Update-Cloudfront
          Actions: 
            - ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                EnvironmentVariables: !Sub '[{"name":"CDN_DISTRIBUTION_ID","value":"${CloudFrontDistro}","type":"PLAINTEXT"}]'
              InputArtifacts: 
                - Name: SourceArtifact
              Name: Update-Cloudfront
              Region: !Sub ${AWS::Region}
              RunOrder: 4
  #!Ref CodePipeline #returns pipeline name
  #!GetAtt [CodePipeline, Version] #pipeline version number


  #S3 buckets
  S3ProdBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName:
        !Sub '${AWS::StackName}-${S3BucketPrefix}-prod'
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      WebsiteConfiguration: 
        ErrorDocument: 404.html
        IndexDocument: index.html
  #!Ref S3ProdBucket #returns bucket name
  #!GetAtt [S3ProdBucket, Arn]
  #!GetAtt [S3ProdBucket, DomainName] #Returns the IPv4 DNS name of the specified bucket
  #!GetAtt [S3ProdBucket, DualStackDomainName] #Returns the IPv6 DNS name of the specified bucket
  #!GetAtt [S3ProdBucket, RegionalDomainName] #Returns the regional domain name of the specified bucket
  #!GetAtt [S3ProdBucket, WebsiteURL]
  ProdBucketPolicy:
    DependsOn: CloudFrontDistro
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ProdBucket
      PolicyDocument:
        Statement:
          - Action: ['s3:GetObject']
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudfrontOAI}'
            Resource:
              !Sub 'arn:aws:s3:::${S3ProdBucket}/*'

  S3StagingBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: 
        !Sub ${AWS::StackName}-${S3BucketPrefix}-staging
      AccessControl: !Ref S3StagingAccessControl
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Id: Delete items after 7 days
            Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      WebsiteConfiguration: 
        ErrorDocument: 404.html
        IndexDocument: index.html
  #!Ref S3StagingBucket #returns bucket name
  #!GetAtt [S3StagingBucket, Arn]
  #!GetAtt [S3StagingBucket, DomainName] #Returns the IPv4 DNS name of the specified bucket
  #!GetAtt [S3StagingBucket, DualStackDomainName] #Returns the IPv6 DNS name of the specified bucket
  #!GetAtt [S3StagingBucket, RegionalDomainName] #Returns the regional domain name of the specified bucket
  #!GetAtt [S3StagingBucket, WebsiteURL]

  CodePipelineS3ArtifactLocation:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: 
        !Sub '${AWS::StackName}-codepipeline-artifacts'
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Id: Delete items after 7 days
            Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  #!Ref CodePipelineS3ArtifactLocation #returns bucket name
  #!GetAtt [CodePipelineS3ArtifactLocation, Arn]
  #!GetAtt [CodePipelineS3ArtifactLocation, DomainName] #Returns the IPv4 DNS name of the specified bucket
  #!GetAtt [CodePipelineS3ArtifactLocation, DualStackDomainName] #Returns the IPv6 DNS name of the specified bucket
  #!GetAtt [CodePipelineS3ArtifactLocation, RegionalDomainName] #Returns the regional domain name of the specified bucket

  #ToDo - Issues with the bucket policy
  #StagingBucketPolicy:
  #  Type: AWS::S3::BucketPolicy
  #  Properties:
  #    Bucket: !Ref 'S3StagingBucket'
  #    PolicyDocument:
  #      Statement:
  #        - Action: ['s3:GetObject']
  #          Effect: Allow
  #          Principal: '*'
  #          Resource:
  #            !Join ['', ['arn:aws:s3:::', !Ref 'S3StagingBucket', /*]]


  #Create Cloudfront Distro
  CloudfrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Sub 'access-identity-${S3ProdBucket.DomainName}'
  #!Ref CloudfrontOAI #returns the origin access identity
  #!GetAtt [CloudfrontOAI , S3CanonicalUserId]
  CloudFrontDistro:
    DependsOn: 
      - S3ProdBucket
      #- LambdaEdgeFunction
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
          CustomErrorResponses: 
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /404.html
          DefaultCacheBehavior: 
              AllowedMethods: 
                - GET
                - HEAD
              CachedMethods: 
                - GET
                - HEAD
              Compress: True
              ForwardedValues: 
                QueryString: False
                Cookies:
                  Forward: none
              LambdaFunctionAssociations:
                - EventType: origin-request
                  LambdaFunctionARN: !Ref LambdaEdgeStackARN
              SmoothStreaming: False
              TargetOriginId: !Sub 'S3-${S3ProdBucket}'
              ViewerProtocolPolicy: allow-all
          DefaultRootObject: index.html
          Enabled: True
          HttpVersion: http2
          IPV6Enabled: True
          Origins: 
            - DomainName: !GetAtt [S3ProdBucket, DomainName]
              Id: !Sub 'S3-${S3ProdBucket}'
              S3OriginConfig: 
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudfrontOAI}'
  #!ref CloudFrontDistro #return cloudfront ID
  #!GetAtt [CloudFrontDistro, DomainName] #return cloudfront url


Outputs:
  CodeCommitGroup:
    Value: !Ref CodeCommitIAMGroup
  CodeCommitURL:
    Value: !GetAtt [CodeCommitRepo, CloneUrlHttp]
  StagingURL:
    Value: !GetAtt [S3StagingBucket, WebsiteURL]
  S3Prod:
    Value: !Ref S3ProdBucket
  S3Staging:
    Value: !Ref S3StagingBucket
  S3BuildArtifact:
    Value: !Ref CodePipelineS3ArtifactLocation
  #HostedZoneID:
  #  Value: !Ref Route53HostedZone
  DomainNameNS:
    Value: !Join [', ', !GetAtt [Route53HostedZone, NameServers]]
  CFDistroURL:
    Value: !Sub 'http://${CloudFrontDistro.DomainName}'
  #LambdaARN:
  #  Value: !Ref LambdaEdgeStackARN
